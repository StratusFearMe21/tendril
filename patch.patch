From 7549780894d7c831874fbb7767af88abeefe9bca Mon Sep 17 00:00:00 2001
From: Max <max.bruce12@gmail.com>
Date: Tue, 27 Apr 2021 11:40:33 -0700
Subject: [PATCH 1/2] serde feature

---
 Cargo.toml         |  4 ++++
 src/buf32.rs       |  2 +-
 src/lib.rs         |  3 +++
 src/serde_impl.rs  | 55 ++++++++++++++++++++++++++++++++++++++++++++++
 src/stream.rs      |  8 +++----
 src/tendril.rs     | 14 +++++++-----
 src/utf8_decode.rs |  6 ++---
 7 files changed, 78 insertions(+), 14 deletions(-)
 create mode 100644 src/serde_impl.rs

diff --git a/Cargo.toml b/Cargo.toml
index 29a6594..daa0e3b 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -8,6 +8,7 @@ repository = "https://github.com/servo/tendril"
 readme = "README.md"
 license = "MIT/Apache-2.0"
 description = "Compact buffer/string type for zero-copy parsing"
+edition = "2018"
 
 [dependencies]
 mac = "0.1"
@@ -15,9 +16,12 @@ encoding = {version = "0.2", optional = true}
 encoding_rs = {version = "0.8.12", optional = true}
 futf = "0.1.2"
 utf-8 = "0.7"
+serde = { version = "1.0", optional = true }
 
 [dev-dependencies]
 rand = "0.4"
+serde_json = "1.0"
 
 [features]
 bench = []
+default = ["serde"]
diff --git a/src/buf32.rs b/src/buf32.rs
index cffafb2..13c7437 100644
--- a/src/buf32.rs
+++ b/src/buf32.rs
@@ -8,7 +8,7 @@
 
 use std::{mem, ptr, slice, u32};
 
-use OFLOW;
+use crate::OFLOW;
 
 pub const MIN_CAP: u32 = 16;
 
diff --git a/src/lib.rs b/src/lib.rs
index 8647c6b..65bb1e1 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -32,4 +32,7 @@ mod tendril;
 mod utf8_decode;
 mod util;
 
+#[cfg(feature = "serde")]
+mod serde_impl;
+
 static OFLOW: &'static str = "tendril: overflow in buffer arithmetic";
diff --git a/src/serde_impl.rs b/src/serde_impl.rs
new file mode 100644
index 0000000..5f382c6
--- /dev/null
+++ b/src/serde_impl.rs
@@ -0,0 +1,55 @@
+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
+// option. This file may not be copied, modified, or distributed
+// except according to those terms.
+
+use serde::{
+    de::{Error, Visitor},
+    Deserialize, Serialize, Serializer,
+};
+
+use crate::StrTendril;
+use std::fmt;
+
+impl Serialize for StrTendril {
+    fn serialize<S: Serializer>(&self, serializer: S) -> Result<S::Ok, S::Error> {
+        self[..].serialize(serializer)
+    }
+}
+
+struct TendrilVisitor;
+
+impl<'de> Visitor<'de> for TendrilVisitor {
+    type Value = StrTendril;
+
+    fn visit_str<E: Error>(self, v: &str) -> Result<Self::Value, E> {
+        Ok(StrTendril::from_slice(v))
+    }
+
+    fn expecting(&self, f: &mut fmt::Formatter) -> fmt::Result {
+        write!(f, "a tendril string")
+    }
+}
+
+impl<'de> Deserialize<'de> for StrTendril {
+    fn deserialize<D: serde::Deserializer<'de>>(deserializer: D) -> Result<Self, D::Error> {
+        deserializer.deserialize_str(TendrilVisitor)
+    }
+}
+
+#[cfg(test)]
+mod test {
+    use super::*;
+
+    #[test]
+    fn test_serialize_deserialize() {
+        let original = "test string";
+        let original_tendril = StrTendril::from_slice(original);
+        let encoded = serde_json::to_string(&original_tendril).unwrap();
+        assert_eq!(encoded, r#""test string""#);
+        let decoded_tendril: StrTendril = serde_json::from_str(&encoded).unwrap();
+        assert_eq!(original_tendril, decoded_tendril);
+        assert_eq!(&decoded_tendril[..], original);
+    }
+}
diff --git a/src/stream.rs b/src/stream.rs
index 8788ecd..c008b68 100644
--- a/src/stream.rs
+++ b/src/stream.rs
@@ -6,8 +6,8 @@
 
 //! Streams of tendrils.
 
-use fmt;
-use tendril::{Atomicity, NonAtomic, Tendril};
+use crate::fmt;
+use crate::tendril::{Atomicity, NonAtomic, Tendril};
 
 use std::borrow::Cow;
 use std::fs::File;
@@ -465,9 +465,9 @@ fn decode_to_sink<Sink, A>(
 #[cfg(test)]
 mod test {
     use super::{TendrilSink, Utf8LossyDecoder};
-    use fmt;
+    use crate::fmt;
+    use crate::tendril::{Atomicity, NonAtomic, Tendril};
     use std::borrow::Cow;
-    use tendril::{Atomicity, NonAtomic, Tendril};
 
     #[cfg(any(feature = "encoding", feature = "encoding_rs"))]
     use super::LossyDecoder;
diff --git a/src/tendril.rs b/src/tendril.rs
index 459e5e4..898950f 100644
--- a/src/tendril.rs
+++ b/src/tendril.rs
@@ -20,11 +20,13 @@ use std::{hash, io, mem, ptr, str, u32};
 #[cfg(feature = "encoding")]
 use encoding::{self, DecoderTrap, EncoderTrap, EncodingRef};
 
-use buf32::{self, Buf32};
-use fmt::imp::Fixup;
-use fmt::{self, Slice};
-use util::{copy_and_advance, copy_lifetime, copy_lifetime_mut, unsafe_slice, unsafe_slice_mut};
-use OFLOW;
+use crate::buf32::{self, Buf32};
+use crate::fmt::imp::Fixup;
+use crate::fmt::{self, Slice};
+use crate::util::{
+    copy_and_advance, copy_lifetime, copy_lifetime_mut, unsafe_slice, unsafe_slice_mut,
+};
+use crate::OFLOW;
 
 const MAX_INLINE_LEN: usize = 8;
 const MAX_INLINE_TAG: usize = 0xF;
@@ -1667,7 +1669,7 @@ mod test {
     use super::{
         Atomic, ByteTendril, Header, NonAtomic, ReadExt, SendTendril, SliceExt, StrTendril, Tendril,
     };
-    use fmt;
+    use crate::fmt;
     use std::iter;
     use std::thread;
 
diff --git a/src/utf8_decode.rs b/src/utf8_decode.rs
index a1db952..b7b2015 100644
--- a/src/utf8_decode.rs
+++ b/src/utf8_decode.rs
@@ -4,9 +4,9 @@
 // option. This file may not be copied, modified, or distributed
 // except according to those terms.
 
-use fmt;
-use tendril::{Atomicity, Tendril};
-use utf8;
+use crate::fmt;
+use crate::tendril::{Atomicity, Tendril};
+use crate::utf8;
 
 pub struct IncompleteUtf8(utf8::Incomplete);
 

From e759f9f54e19380d5cc6c5531921cafb3752c7ba Mon Sep 17 00:00:00 2001
From: Max <max.bruce12@gmail.com>
Date: Tue, 27 Apr 2021 11:40:59 -0700
Subject: [PATCH 2/2] v0.4.3

---
 Cargo.toml | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/Cargo.toml b/Cargo.toml
index daa0e3b..51789af 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -1,6 +1,6 @@
 [package]
 name = "tendril"
-version = "0.4.2"
+version = "0.4.3"
 authors = ["Keegan McAllister <mcallister.keegan@gmail.com>",
            "Simon Sapin <simon.sapin@exyr.org>",
            "Chris Morgan <me@chrismorgan.info>"]

